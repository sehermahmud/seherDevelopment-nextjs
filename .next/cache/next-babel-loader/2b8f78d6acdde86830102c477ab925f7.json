{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport Head from \"next/head\";\nimport axios from \"axios\";\nimport { cloneDeep } from \"lodash\";\nimport Lottie from \"react-lottie\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport estimateAnimation from \"../src/animations/estimateAnimation/data.json\";\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    width: \"12em\",\n    height: \"10em\"\n  },\n  estimateButton: _objectSpread(_objectSpread({}, theme.typography.estimate), {}, {\n    borderRadius: 50,\n    backgroundColor: theme.palette.common.blue,\n    height: 50,\n    width: 225,\n    fontSize: \"1.25rem\",\n    marginTop: \"5em\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.primary.light\n    }\n  }),\n  message: {\n    border: `2px solid ${theme.palette.common.redPink}`,\n    marginTop: \"3em\",\n    marginBottom: \"2em\",\n    borderRadius: 5\n  },\n  specialText: {\n    fontFamily: \"Raleway\",\n    fontWeight: 700,\n    fontSize: \"1.5rem\",\n    color: theme.palette.common.orange\n  }\n}));\nconst defaultQuestions = [{\n  id: 1,\n  title: \"Which services are you interested in?\",\n  active: true,\n  options: [{\n    id: 1,\n    title: \"Custom Software Development\",\n    subtitle: null,\n    icon: \"/assets/software.svg\",\n    iconAlt: \"three floating screens\",\n    selected: false,\n    cost: 0\n  }, {\n    id: 2,\n    title: \"iOS/Android App Development\",\n    subtitle: null,\n    icon: \"/assets/mobile.svg\",\n    iconAlt: \"phones and tablet outline\",\n    selected: false,\n    cost: 0\n  }, {\n    id: 3,\n    title: \"Website Development\",\n    subtitle: null,\n    icon: \"/assets/website.svg\",\n    iconAlt: \"computer outline\",\n    selected: false,\n    cost: 0\n  }]\n}];\nconst softwareQuestions = [_objectSpread(_objectSpread({}, defaultQuestions[0]), {}, {\n  active: false\n}), {\n  id: 2,\n  title: \"Which platforms do you need supported?\",\n  subtitle: \"Select all that apply.\",\n  options: [{\n    id: 1,\n    title: \"Web Application\",\n    subtitle: null,\n    icon: \"/assets/website.svg\",\n    iconAlt: \"computer outline\",\n    selected: false,\n    cost: 20\n  }, {\n    id: 2,\n    title: \"iOS Application\",\n    subtitle: null,\n    icon: \"/assets/iphone.svg\",\n    iconAlt: \"outline of iphone\",\n    selected: false,\n    cost: 40\n  }, {\n    id: 3,\n    title: \"Android Application\",\n    subtitle: null,\n    icon: \"/assets/android.svg\",\n    iconAlt: \"outlines of android phone\",\n    selected: false,\n    cost: 30\n  }],\n  active: true\n}, {\n  id: 3,\n  title: \"Which features do you expect to use?\",\n  subtitle: \"Select all that apply.\",\n  options: [{\n    id: 1,\n    title: \"Photo/Video\",\n    subtitle: null,\n    icon: \"/assets/camera.svg\",\n    iconAlt: \"camera outline\",\n    selected: false,\n    cost: 5\n  }, {\n    id: 2,\n    title: \"GPS\",\n    subtitle: null,\n    icon: \"/assets/gps.svg\",\n    iconAlt: \"gps pin\",\n    selected: false,\n    cost: 10\n  }, {\n    id: 3,\n    title: \"File Transfer\",\n    subtitle: null,\n    icon: \"/assets/upload.svg\",\n    iconAlt: \"outline of cloud with arrow pointing up\",\n    selected: false,\n    cost: 10\n  }],\n  active: false\n}, {\n  id: 4,\n  title: \"Which features do you expect to use?\",\n  subtitle: \"Select all that apply.\",\n  options: [{\n    id: 1,\n    title: \"Users/Authentication\",\n    subtitle: null,\n    icon: \"/assets/users.svg\",\n    iconAlt: \"outline of a person with a plus sign\",\n    selected: false,\n    cost: 20\n  }, {\n    id: 2,\n    title: \"Biometrics\",\n    subtitle: null,\n    icon: \"/assets/biometrics.svg\",\n    iconAlt: \"fingerprint\",\n    selected: false,\n    cost: 20\n  }, {\n    id: 3,\n    title: \"Push Notifications\",\n    subtitle: null,\n    icon: \"/assets/bell.svg\",\n    iconAlt: \"outline of a bell\",\n    selected: false,\n    cost: 20\n  }],\n  active: false\n}, {\n  id: 5,\n  title: \"What type of custom features do you expect to need?\",\n  subtitle: \"Select one.\",\n  options: [{\n    id: 1,\n    title: \"Low Complexity\",\n    subtitle: \"(Informational)\",\n    icon: \"/assets/info.svg\",\n    iconAlt: \"'i' inside a circle\",\n    selected: false,\n    cost: 25\n  }, {\n    id: 2,\n    title: \"Medium Complexity\",\n    subtitle: \"(Interactive, Customizable, Realtime)\",\n    icon: \"/assets/customized.svg\",\n    iconAlt: \"two toggle switches\",\n    selected: false,\n    cost: 50\n  }, {\n    id: 3,\n    title: \"High Complexity\",\n    subtitle: \"(Data Modeling and Computation)\",\n    icon: \"/assets/data.svg\",\n    iconAlt: \"outline of line graph\",\n    selected: false,\n    cost: 100\n  }],\n  active: false\n}, {\n  id: 6,\n  title: \"How many users do you expect?\",\n  subtitle: \"Select one.\",\n  options: [{\n    id: 1,\n    title: \"0-10\",\n    subtitle: null,\n    icon: \"/assets/person.svg\",\n    iconAlt: \"person outline\",\n    selected: false,\n    cost: 1\n  }, {\n    id: 2,\n    title: \"10-100\",\n    subtitle: null,\n    icon: \"/assets/persons.svg\",\n    iconAlt: \"outline of two people\",\n    selected: false,\n    cost: 1.25\n  }, {\n    id: 3,\n    title: \"100+\",\n    subtitle: null,\n    icon: \"/assets/people.svg\",\n    iconAlt: \"outline of three people\",\n    selected: false,\n    cost: 1.5\n  }],\n  active: false\n}];\nconst websiteQuestions = [_objectSpread(_objectSpread({}, defaultQuestions[0]), {}, {\n  active: false\n}), {\n  id: 2,\n  title: \"Which type of website are you wanting?\",\n  subtitle: \"Select one.\",\n  options: [{\n    id: 1,\n    title: \"Basic\",\n    subtitle: \"(Informational)\",\n    icon: \"/assets/info.svg\",\n    iconAlt: \"person outline\",\n    selected: false,\n    cost: 60\n  }, {\n    id: 2,\n    title: \"Interactive\",\n    subtitle: \"(Users, API's, Messaging)\",\n    icon: \"/assets/customized.svg\",\n    iconAlt: \"outline of two people\",\n    selected: false,\n    cost: 100\n  }, {\n    id: 3,\n    title: \"E-Commerce\",\n    subtitle: \"(Sales)\",\n    icon: \"/assets/globe.svg\",\n    iconAlt: \"outline of three people\",\n    selected: false,\n    cost: 150\n  }],\n  active: true\n}];\nexport default function Estimate() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(defaultQuestions);\n  const {\n    0: dialogOpen,\n    1: setDialogOpen\n  } = useState(false);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: emailHelper,\n    1: setEmailHelper\n  } = useState(\"\");\n  const {\n    0: phone,\n    1: setPhone\n  } = useState(\"\");\n  const {\n    0: phoneHelper,\n    1: setPhoneHelper\n  } = useState(\"\");\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  const {\n    0: service,\n    1: setService\n  } = useState([]);\n  const {\n    0: platforms,\n    1: setPlatforms\n  } = useState([]);\n  const {\n    0: features,\n    1: setFeatures\n  } = useState([]);\n  const {\n    0: customFeatures,\n    1: setCustomFeatures\n  } = useState(\"\");\n  const {\n    0: category,\n    1: setCategory\n  } = useState(\"\");\n  const {\n    0: users,\n    1: setUsers\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: alert,\n    1: setAlert\n  } = useState({\n    open: false,\n    message: \"\",\n    backgroundColor: \"\"\n  });\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: estimateAnimation,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n\n  const nextQuestion = () => {\n    const newQuestions = cloneDeep(questions);\n    const currentlyActive = newQuestions.filter(question => question.active);\n    const activeIndex = currentlyActive[0].id - 1;\n    const nextIndex = activeIndex + 1;\n    newQuestions[activeIndex] = _objectSpread(_objectSpread({}, currentlyActive[0]), {}, {\n      active: false\n    });\n    newQuestions[nextIndex] = _objectSpread(_objectSpread({}, newQuestions[nextIndex]), {}, {\n      active: true\n    });\n    setQuestions(newQuestions);\n  };\n\n  const previousQuestion = () => {\n    const newQuestions = cloneDeep(questions);\n    const currentlyActive = newQuestions.filter(question => question.active);\n    const activeIndex = currentlyActive[0].id - 1;\n    const nextIndex = activeIndex - 1;\n    newQuestions[activeIndex] = _objectSpread(_objectSpread({}, currentlyActive[0]), {}, {\n      active: false\n    });\n    newQuestions[nextIndex] = _objectSpread(_objectSpread({}, newQuestions[nextIndex]), {}, {\n      active: true\n    });\n    setQuestions(newQuestions);\n  };\n\n  const navigationPreviousDisabled = () => {\n    const currentlyActive = questions.filter(question => question.active);\n\n    if (currentlyActive[0].id === 1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const navigationNextDisabled = () => {\n    const currentlyActive = questions.filter(question => question.active);\n\n    if (currentlyActive[0].id === questions[questions.length - 1].id) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleSelect = id => {\n    const newQuestions = cloneDeep(questions);\n    const currentlyActive = newQuestions.filter(question => question.active);\n    const activeIndex = currentlyActive[0].id - 1;\n    const newSelected = newQuestions[activeIndex].options[id - 1];\n    const previousSelected = currentlyActive[0].options.filter(option => option.selected);\n\n    switch (currentlyActive[0].subtitle) {\n      case \"Select one.\":\n        if (previousSelected[0]) {\n          previousSelected[0].selected = !previousSelected[0].selected;\n        }\n\n        newSelected.selected = !newSelected.selected;\n        break;\n\n      default:\n        newSelected.selected = !newSelected.selected;\n        break;\n    }\n\n    switch (newSelected.title) {\n      case \"Custom Software Development\":\n        setQuestions(softwareQuestions);\n        setService(newSelected.title);\n        setPlatforms([]);\n        setFeatures([]);\n        setCustomFeatures(\"\");\n        setCategory(\"\");\n        setUsers(\"\");\n        break;\n\n      case \"iOS/Android App Development\":\n        setQuestions(softwareQuestions);\n        setService(newSelected.title);\n        setPlatforms([]);\n        setFeatures([]);\n        setCustomFeatures(\"\");\n        setCategory(\"\");\n        setUsers(\"\");\n        break;\n\n      case \"Website Development\":\n        setQuestions(websiteQuestions);\n        setService(newSelected.title);\n        setPlatforms([]);\n        setFeatures([]);\n        setCustomFeatures(\"\");\n        setCategory(\"\");\n        setUsers(\"\");\n        break;\n\n      default:\n        setQuestions(newQuestions);\n    }\n  };\n\n  const onChange = event => {\n    let valid;\n\n    switch (event.target.id) {\n      case \"email\":\n        setEmail(event.target.value);\n        valid = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(event.target.value);\n\n        if (!valid) {\n          setEmailHelper(\"Invalid email\");\n        } else {\n          setEmailHelper(\"\");\n        }\n\n        break;\n\n      case \"phone\":\n        setPhone(event.target.value);\n        valid = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{5})$/.test(event.target.value);\n\n        if (!valid) {\n          setPhoneHelper(\"Invalid phone\");\n        } else {\n          setPhoneHelper(\"\");\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const getTotal = () => {\n    let cost = 0;\n    const selections = questions.map(question => question.options.filter(option => option.selected)).filter(question => question.length > 0);\n    selections.map(options => options.map(option => cost += option.cost));\n\n    if (questions.length > 2) {\n      const userCost = questions.filter(question => question.title === \"How many users do you expect?\").map(question => question.options.filter(option => option.selected))[0][0];\n      setUsers(userCost.title);\n      cost -= userCost.cost;\n      cost *= userCost.cost;\n    }\n\n    setTotal(cost);\n  };\n\n  const getPlatforms = () => {\n    let newPlatforms = [];\n\n    if (questions.length > 2) {\n      questions.filter(question => question.title === \"Which platforms do you need supported?\").map(question => question.options.filter(option => option.selected))[0].map(option => newPlatforms.push(option.title));\n      setPlatforms(newPlatforms);\n    }\n  };\n\n  const getFeatures = () => {\n    let newFeatures = [];\n\n    if (questions.length > 2) {\n      questions.filter(question => question.title === \"Which features do you expect to use?\").map(question => question.options.filter(option => option.selected)).map(option => option.map(newFeature => newFeatures.push(newFeature.title)));\n      setFeatures(newFeatures);\n    }\n  };\n\n  const getCustomFeatures = () => {\n    if (questions.length > 2) {\n      const newCustomFeatures = questions.filter(question => question.title === \"What type of custom features do you expect to need?\").map(question => question.options.filter(option => option.selected))[0][0].title;\n      setCustomFeatures(newCustomFeatures);\n    }\n  };\n\n  const getCategory = () => {\n    if (questions.length === 2) {\n      const newCategory = questions.filter(question => question.title === \"Which type of website are you wanting?\")[0].options.filter(option => option.selected)[0].title;\n      setCategory(newCategory);\n    }\n  };\n\n  const sendEstimate = () => {\n    setLoading(true);\n    axios.get(\"https://us-central1-seher-development-5dfc5.cloudfunctions.net/sendMail\", {\n      params: {\n        name: name,\n        email: email,\n        phone: phone,\n        message: message,\n        total: total,\n        category: category,\n        service: service,\n        platforms: platforms,\n        features: features,\n        customFeatures: customFeatures,\n        users: users\n      }\n    }).then(res => {\n      setLoading(false);\n      setAlert({\n        open: true,\n        message: \"Estimate placed successfully!\",\n        backgroundColor: \"#4BB543\"\n      });\n      setDialogOpen(false);\n    }).catch(err => {\n      console.error(err);\n      setLoading(false);\n      setAlert({\n        open: true,\n        message: \"Something went wrong! Please try again.\",\n        backgroundColor: \"#FF3232\"\n      });\n    });\n  };\n\n  const estimateDisabled = () => {\n    let disabled = true;\n    const emptySelections = questions.map(question => question.options.filter(option => option.selected)).filter(question => question.length === 0);\n\n    if (questions.length === 2) {\n      if (emptySelections.length === 1) {\n        disabled = false;\n      }\n    } else if (questions.length === 1) {\n      disabled = true;\n    } else if (emptySelections.length < 3 && questions[questions.length - 1].options.filter(option => option.selected).length > 0) {\n      disabled = false;\n    }\n\n    return disabled;\n  };\n\n  const softwareSelection = __jsx(Grid, {\n    container: true,\n    direction: \"column\"\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    style: {\n      marginBottom: \"1.25em\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2\n  }, __jsx(\"img\", {\n    src: \"/assets/check.svg\",\n    alt: \"checkmark\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 10\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"You want \", service, platforms.length > 0 ? ` for ${//if only web application is selected...\n  platforms.indexOf(\"Web Application\") > -1 && platforms.length === 1 ? //then finish sentence here\n  \"a Web Application.\" : //otherwise, if web application and another platform is selected...\n  platforms.indexOf(\"Web Application\") > -1 && platforms.length === 2 ? //then finish the sentence here\n  `a Web Application and an ${platforms[1]}.` : //otherwise, if only one platform is selected which isn't web application...\n  platforms.length === 1 ? //then finish the sentence here\n  `an ${platforms[0]}` : //otherwise, if other two options are selected...\n  platforms.length === 2 ? //then finish the sentence here\n  \"an iOS Application and an Android Application.\" : //otherwise if all three are selected...\n  platforms.length === 3 ? //then finish the sentence here\n  \"a Web Application, an iOS Application, and an Android Application.\" : null}` : null))), __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    style: {\n      marginBottom: \"1.25em\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2\n  }, __jsx(\"img\", {\n    src: \"/assets/check.svg\",\n    alt: \"checkmark\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 10\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"with \", features.length > 0 ? //...and there's only 1...\n  features.length === 1 ? //then end the sentence here\n  `${features[0]}.` : //otherwise, if there are two features...\n  features.length === 2 ? //...then end the sentence here\n  `${features[0]} and ${features[1]}.` : //otherwise, if there are three or more features...\n  features //filter out the very last feature...\n  .filter((feature, index) => index !== features.length - 1) //and for those features return their name...\n  .map((feature, index) => __jsx(\"span\", {\n    key: index\n  }, `${feature}, `)) : null, features.length > 2 ? //...and then finally add the last feature with 'and' in front of it\n  ` and ${features[features.length - 1]}.` : null))), __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2\n  }, __jsx(\"img\", {\n    src: \"/assets/check.svg\",\n    alt: \"checkmark\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 10\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"The custom features will be of \", customFeatures.toLowerCase(), `, and the project will be used by about ${users} users.`))));\n\n  const websiteSelection = __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    style: {\n      marginTop: \"14em\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 2\n  }, __jsx(\"img\", {\n    src: \"/assets/check.svg\",\n    alt: \"checkmark\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 10\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"You want\", \" \", category === \"Basic\" ? \"a Basic Website\" : `an ${category} Website`))));\n\n  return __jsx(Grid, {\n    container: true,\n    direction: \"row\"\n  }, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"Free Custom Software Estimate | Seher Development\"), __jsx(\"meta\", {\n    name: \"description\",\n    key: \"description\",\n    content: \"Use our free online estimate calculator to instantly check the cost of your custom software, mobile app, website design and development project!\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"Bringing West Coast Technology to the Bangladesh | Free Estimate\",\n    key: \"og:title\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    key: \"og:url\",\n    content: \"https://seher-development.vercel.app/estimate\"\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    key: \"canonical\",\n    href: \"https://seher-development.vercel.app/estimate\"\n  })), __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    lg: true,\n    alignItems: matchesMD ? \"center\" : undefined\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      marginTop: \"2em\",\n      marginLeft: matchesMD ? 0 : \"5em\"\n    }\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    align: matchesMD ? \"center\" : undefined\n  }, \"Estimate\")), __jsx(Grid, {\n    item: true,\n    style: {\n      marginRight: matchesMD ? 0 : \"10em\",\n      maxWidth: \"50em\",\n      marginTop: \"7.5em\"\n    }\n  }, __jsx(Lottie, {\n    options: defaultOptions,\n    height: \"100%\",\n    width: \"100%\"\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    lg: true,\n    style: {\n      marginRight: matchesMD ? 0 : \"2em\",\n      marginBottom: \"25em\"\n    }\n  }, questions.filter(question => question.active).map((question, index) => __jsx(React.Fragment, {\n    key: index\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    align: \"center\",\n    style: {\n      fontWeight: 500,\n      fontSize: \"2.25rem\",\n      marginTop: \"5em\",\n      lineHeight: 1.25,\n      marginLeft: matchesSM ? \"1em\" : 0,\n      marginRight: matchesSM ? \"1em\" : 0\n    }\n  }, question.title), __jsx(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    style: {\n      marginBottom: \"2.5em\"\n    },\n    gutterBottom: true\n  }, question.subtitle)), __jsx(Grid, {\n    item: true,\n    container: true\n  }, question.options.map((option, index) => __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    md: true,\n    key: index,\n    component: Button,\n    onClick: () => handleSelect(option.id),\n    style: {\n      display: \"grid\",\n      textTransform: \"none\",\n      borderRadius: 0,\n      marginBottom: matchesSM ? \"1.5em\" : 0,\n      backgroundColor: option.selected ? theme.palette.common.blue : null\n    }\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      maxWidth: \"14em\"\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    style: {\n      marginBottom: \"1em\"\n    }\n  }, option.title), __jsx(Typography, {\n    variant: \"caption\",\n    align: \"center\"\n  }, option.subtitle)), __jsx(Grid, null, __jsx(\"img\", {\n    src: option.icon,\n    alt: option.iconAlt,\n    className: classes.icon\n  }))))))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"space-between\",\n    style: {\n      width: \"18em\",\n      marginTop: \"3em\"\n    }\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(IconButton, {\n    disabled: navigationPreviousDisabled(),\n    onClick: previousQuestion\n  }, __jsx(\"img\", {\n    src: navigationPreviousDisabled() ? \"/assets/backArrowDisabled.svg\" : \"/assets/backArrow.svg\",\n    alt: \"Previous question\"\n  }))), __jsx(Grid, {\n    item: true\n  }, __jsx(IconButton, {\n    disabled: navigationNextDisabled(),\n    onClick: nextQuestion\n  }, __jsx(\"img\", {\n    src: navigationNextDisabled() ? \"/assets/forwardArrowDisabled.svg\" : \"/assets/forwardArrow.svg\",\n    alt: \"forward question\"\n  })))), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.estimateButton,\n    disabled: estimateDisabled(),\n    onClick: () => {\n      setDialogOpen(true);\n      getTotal();\n      getPlatforms();\n      getFeatures();\n      getCustomFeatures();\n      getCategory();\n    }\n  }, \"Get Estimate\"))), __jsx(Dialog, {\n    open: dialogOpen,\n    onClose: () => setDialogOpen(false),\n    fullWidth: true,\n    maxWidth: \"lg\",\n    fullScreen: matchesSM,\n    style: {\n      zIndex: 1302\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      marginTop: \"1em\",\n      marginBottom: \"1em\"\n    }\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    align: \"center\"\n  }, \"Estimate\"))), __jsx(DialogContent, null, __jsx(Grid, {\n    container: true,\n    justify: \"space-around\",\n    direction: matchesSM ? \"column\" : \"row\",\n    alignItems: matchesSM ? \"center\" : undefined\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    md: 7,\n    style: {\n      maxWidth: \"20em\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      marginBottom: \"0.5em\"\n    }\n  }, __jsx(TextField, {\n    label: \"Name\",\n    id: \"name\",\n    fullWidth: true,\n    value: name,\n    onChange: event => setName(event.target.value)\n  })), __jsx(Grid, {\n    item: true,\n    style: {\n      marginBottom: \"0.5em\"\n    }\n  }, __jsx(TextField, {\n    label: \"Email\",\n    error: emailHelper.length !== 0,\n    helperText: emailHelper,\n    id: \"email\",\n    fullWidth: true,\n    value: email,\n    onChange: onChange\n  })), __jsx(Grid, {\n    item: true,\n    style: {\n      marginBottom: \"0.5em\"\n    }\n  }, __jsx(TextField, {\n    label: \"Phone\",\n    error: phoneHelper.length !== 0,\n    helperText: phoneHelper,\n    id: \"phone\",\n    fullWidth: true,\n    value: phone,\n    onChange: onChange\n  })), __jsx(Grid, {\n    item: true,\n    style: {\n      maxWidth: \"20em\"\n    }\n  }, __jsx(TextField, {\n    InputProps: {\n      disableUnderline: true\n    },\n    value: message,\n    className: classes.message,\n    multiline: true,\n    fullWidth: true,\n    placeholder: \"Tell us more about your project\",\n    rows: 10,\n    id: \"message\",\n    onChange: event => setMessage(event.target.value)\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    align: matchesSM ? \"center\" : undefined,\n    paragraph: true,\n    style: {\n      lineHeight: 1.25\n    }\n  }, \"We can create this digital solution for an estimated\", \" \", __jsx(\"span\", {\n    className: classes.specialText\n  }, \"$\", total.toFixed(2))), __jsx(Typography, {\n    variant: \"body1\",\n    align: matchesSM ? \"center\" : undefined,\n    paragraph: true\n  }, \"Fill out your name, phone number, and email, place your request, and we'll get back to you with details moving forward and a final price\"))), __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    alignItems: matchesSM ? \"center\" : undefined,\n    md: 5,\n    style: {\n      maxWidth: \"30em\"\n    }\n  }, __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true\n  }, questions.length > 2 ? softwareSelection : websiteSelection)), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"contained\",\n    className: classes.estimateButton,\n    onClick: sendEstimate,\n    disabled: name.length === 0 || message.length === 0 || phone.length === 0 || phoneHelper.length !== 0 || email.length === 0 || emailHelper.length !== 0\n  }, loading ? __jsx(CircularProgress, {\n    color: \"secondary\"\n  }) : __jsx(React.Fragment, null, \"Place Request\", __jsx(\"img\", {\n    src: \"/assets/send.svg\",\n    alt: \"paper airplane\",\n    style: {\n      marginLeft: \"0.5em\"\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    style: {\n      marginBottom: matchesSM ? \"5em\" : 0\n    }\n  }, __jsx(Hidden, {\n    mdUp: true\n  }, __jsx(Button, {\n    style: {\n      fontWeight: 300,\n      color: \"blue\"\n    },\n    onClick: () => setDialogOpen(false)\n  }, \"Cancel\"))))))), __jsx(Snackbar, {\n    open: alert.open,\n    message: alert.message,\n    ContentProps: {\n      style: {\n        backgroundColor: alert.backgroundColor\n      }\n    },\n    anchorOrigin: {\n      vertical: \"top\",\n      horizontal: \"center\"\n    },\n    onClose: () => setAlert(false),\n    autoHideDuration: 4000\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}