{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Lottie from \"react-lottie\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Button from \"@material-ui/core/Button\";\nimport Link from \"../Link\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport heartanimation from \"../animations/heartanimation/heart.json\";\n\nfunction ElevationScroll(props) {\n  var children = props.children;\n  var trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0\n  });\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0\n  });\n}\n\nvar useStyles = makeStyles(function (theme) {\n  var _objectSpread2, _logo;\n\n  return {\n    toolbarMargin: _objectSpread(_objectSpread({}, theme.mixins.toolbar), {}, (_objectSpread2 = {\n      marginBottom: \"3em\"\n    }, _defineProperty(_objectSpread2, theme.breakpoints.down(\"md\"), {\n      marginBottom: \"2em\"\n    }), _defineProperty(_objectSpread2, theme.breakpoints.down(\"xs\"), {\n      marginBottom: \"1.25em\"\n    }), _objectSpread2)),\n    logo: (_logo = {\n      height: \"8em\",\n      width: \"8rem\"\n    }, _defineProperty(_logo, theme.breakpoints.down(\"md\"), {\n      height: \"7em\",\n      width: \"7rem\"\n    }), _defineProperty(_logo, theme.breakpoints.down(\"xs\"), {\n      height: \"5.5em\",\n      width: \"5.5rem\"\n    }), _logo),\n    logoContainer: {\n      padding: 0,\n      \"&:hover\": {\n        backgroundColor: \"transparent\"\n      }\n    },\n    tabContainer: {\n      marginLeft: \"auto\"\n    },\n    tab: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n      minWidth: 10,\n      marginLeft: \"25px\"\n    }),\n    button: _objectSpread(_objectSpread({}, theme.typography.estimate), {}, {\n      borderRadius: \"50px\",\n      marginLeft: \"50px\",\n      marginRight: \"25px\",\n      height: \"45px\",\n      \"&:hover\": {\n        backgroundColor: theme.palette.primary.light\n      }\n    }),\n    menu: {\n      backgroundColor: theme.palette.common.redPink,\n      color: \"white\",\n      borderRadius: \"0px\"\n    },\n    menuItem: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n      color: \"white\",\n      opacity: 0.7,\n      \"&:hover\": {\n        opacity: 1\n      }\n    }),\n    drawerIcon: {\n      height: \"50px\",\n      width: \"50px\"\n    },\n    drawerIconContainer: {\n      marginLeft: \"auto\",\n      \"&:hover\": {\n        backgroundColor: \"transparent\"\n      }\n    },\n    drawer: {\n      backgroundColor: theme.palette.common.redPink\n    },\n    drawerItem: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n      color: \"white\",\n      opacity: 0.7\n    }),\n    drawerItemEstimate: {\n      backgroundColor: theme.palette.common.blue\n    },\n    drawerItemSelected: {\n      \"& .MuiListItemText-root\": {\n        opacity: 1\n      }\n    },\n    appbar: {\n      zIndex: theme.zIndex.modal + 1\n    }\n  };\n});\nexport default function Header(props) {\n  var classes = useStyles();\n  var theme = useTheme();\n  var iOS = true && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  var matches = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  var _useState = useState(false),\n      openDrawer = _useState[0],\n      setOpenDrawer = _useState[1];\n\n  var _useState2 = useState(null),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var _useState3 = useState(false),\n      openMenu = _useState3[0],\n      setOpenMenu = _useState3[1];\n\n  var defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: heartanimation,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n\n  var handleChange = function handleChange(e, newValue) {\n    props.setValue(newValue);\n  };\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n    setOpenMenu(true);\n  };\n\n  var handleMenuItemClick = function handleMenuItemClick(e, i) {\n    setAnchorEl(null);\n    setOpenMenu(false);\n    props.setSelectedIndex(i);\n  };\n\n  var handleClose = function handleClose(e) {\n    setAnchorEl(null);\n    setOpenMenu(false);\n  };\n\n  var menuOptions = [{\n    name: \"Services\",\n    link: \"/services\",\n    activeIndex: 1,\n    selectedIndex: 0\n  }, {\n    name: \"Custom Software Development\",\n    link: \"/customsoftware\",\n    activeIndex: 1,\n    selectedIndex: 1\n  }, {\n    name: \"iOS/Android App Development\",\n    link: \"/mobileapps\",\n    activeIndex: 1,\n    selectedIndex: 2\n  }, {\n    name: \"Website Development\",\n    link: \"/websites\",\n    activeIndex: 1,\n    selectedIndex: 3\n  }];\n  var routes = [{\n    name: \"Home\",\n    link: \"/\",\n    activeIndex: 0\n  }, {\n    name: \"Services\",\n    link: \"/services\",\n    activeIndex: 1,\n    ariaOwns: anchorEl ? \"simple-menu\" : undefined,\n    ariaPopup: anchorEl ? \"true\" : undefined,\n    mouseOver: function mouseOver(event) {\n      return handleClick(event);\n    }\n  }, {\n    name: \"The Revolution\",\n    link: \"/revolution\",\n    activeIndex: 2\n  }, {\n    name: \"About Us\",\n    link: \"/about\",\n    activeIndex: 3\n  }, {\n    name: \"Contact Us\",\n    link: \"/contact\",\n    activeIndex: 4\n  }];\n  useEffect(function () {\n    [].concat(menuOptions, routes).forEach(function (route) {\n      switch (window.location.pathname) {\n        case \"\".concat(route.link):\n          if (props.value !== route.activeIndex) {\n            props.setValue(route.activeIndex);\n\n            if (route.selectedIndex && route.selectedIndex !== props.selectedIndex) {\n              props.setSelectedIndex(route.selectedIndex);\n            }\n          }\n\n          break;\n\n        case \"/estimate\":\n          if (props.value !== 5) {\n            props.setValue(5);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n  }, [props.value, menuOptions, props.selectedIndex, routes, props]);\n\n  var tabs = __jsx(React.Fragment, null, __jsx(Tabs, {\n    value: props.value,\n    onChange: handleChange,\n    className: classes.tabContainer,\n    indicatorColor: \"primary\"\n  }, routes.map(function (route, index) {\n    return __jsx(Tab, {\n      key: \"\".concat(route).concat(index),\n      className: classes.tab,\n      component: Link,\n      href: route.link,\n      label: route.name,\n      \"aria-owns\": route.ariaOwns,\n      \"aria-haspopup\": route.ariaPopup,\n      onMouseOver: route.mouseOver,\n      style: {\n        color: \"white\"\n      }\n    });\n  })), __jsx(Button, {\n    component: Link,\n    href: \"/estimate\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: function onClick() {\n      return props.setValue(5);\n    }\n  }, \"Free Estimate\"), __jsx(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    open: openMenu,\n    onClose: handleClose,\n    classes: {\n      paper: classes.menu\n    },\n    MenuListProps: {\n      onMouseLeave: handleClose\n    },\n    elevation: 0,\n    style: {\n      zIndex: 1302\n    },\n    keepMounted: true\n  }, menuOptions.map(function (option, i) {\n    return __jsx(MenuItem, {\n      key: \"\".concat(option).concat(i),\n      component: Link,\n      href: option.link,\n      classes: {\n        root: classes.menuItem\n      },\n      onClick: function onClick(event) {\n        handleMenuItemClick(event, i);\n        props.setValue(1);\n        handleClose();\n      },\n      selected: i === props.selectedIndex && props.value === 1\n    }, option.name);\n  })));\n\n  var drawer = __jsx(React.Fragment, null, __jsx(SwipeableDrawer, {\n    disableBackdropTransition: !iOS,\n    disableDiscovery: iOS,\n    open: openDrawer,\n    onClose: function onClose() {\n      return setOpenDrawer(false);\n    },\n    onOpen: function onOpen() {\n      return setOpenDrawer(true);\n    },\n    classes: {\n      paper: classes.drawer\n    }\n  }, __jsx(\"div\", {\n    className: classes.toolbarMargin\n  }), __jsx(List, {\n    disablePadding: true\n  }, routes.map(function (route) {\n    return __jsx(ListItem, {\n      divider: true,\n      key: \"\".concat(route).concat(route.activeIndex),\n      button: true,\n      component: Link,\n      href: route.link,\n      selected: props.value === route.activeIndex,\n      classes: {\n        selected: classes.drawerItemSelected\n      },\n      onClick: function onClick() {\n        setOpenDrawer(false);\n        props.setValue(route.activeIndex);\n      }\n    }, __jsx(ListItemText, {\n      className: classes.drawerItem,\n      disableTypography: true\n    }, route.name));\n  }), __jsx(ListItem, {\n    onClick: function onClick() {\n      setOpenDrawer(false);\n      props.setValue(5);\n    },\n    divider: true,\n    button: true,\n    component: Link,\n    classes: {\n      root: classes.drawerItemEstimate,\n      selected: classes.drawerItemSelected\n    },\n    href: \"/estimate\",\n    selected: props.value === 5\n  }, __jsx(ListItemText, {\n    className: classes.drawerItem,\n    disableTypography: true\n  }, \"Free Estimate\")))), __jsx(IconButton, {\n    className: classes.drawerIconContainer,\n    onClick: function onClick() {\n      return setOpenDrawer(!openDrawer);\n    },\n    disableRipple: true\n  }, __jsx(MenuIcon, {\n    className: classes.drawerIcon\n  })));\n\n  return __jsx(React.Fragment, null, __jsx(ElevationScroll, null, __jsx(AppBar, {\n    position: \"fixed\",\n    color: \"secondary\",\n    className: classes.appbar\n  }, __jsx(Toolbar, {\n    disableGutters: true\n  }, __jsx(Lottie, {\n    options: defaultOptions,\n    height: \"5em\",\n    width: \"6em\",\n    style: {\n      margin: 0\n    }\n  }), __jsx(Button, {\n    component: Link,\n    href: \"/\",\n    disableRipple: true,\n    onClick: function onClick() {\n      return props.setValue(0);\n    },\n    className: classes.logoContainer\n  }, __jsx(\"img\", {\n    alt: \"Company logo\",\n    className: classes.logo,\n    src: \"/assets/seherlogo.png\"\n  })), __jsx(Hidden, {\n    mdDown: true\n  }, tabs), __jsx(Hidden, {\n    lgUp: true\n  }, drawer)))), __jsx(\"div\", {\n    className: classes.toolbarMargin\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}